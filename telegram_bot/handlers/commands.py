from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from telegram_bot.services.bitrix_service import BitrixService
from telegram_bot.database.engine import async_session_factory
from telegram_bot.database.models import Client, BitrixTaskLink
from telegram_bot.utils.transliteration import get_russian_name
from telegram_bot.utils.schedule import now_msk, is_processing_window_now
from telegram_bot.config.settings import BotSettings
from sqlalchemy import select, desc

router = Router()


STATUS_MAP = {
    1: "–ù–æ–≤–∞—è",
    2: "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
    3: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
    4: "–û–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è",
    5: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
    6: "–û—Ç–ª–æ–∂–µ–Ω–∞",
    7: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
}


def human_status(code: str | int | None) -> str:
    try:
        icode = int(code) if code is not None else None
    except Exception:
        icode = None
    return STATUS_MAP.get(icode, str(code) if code is not None else "-")


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π `/start`
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    russian_name = get_russian_name(message.from_user.full_name or message.from_user.first_name or "")
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {russian_name}!")


@router.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π `/help`
    """
    await message.answer("–≠—Ç–æ –±–æ—Ç –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")


@router.message(Command("status"))
async def command_status_handler(message: Message, bitrix_service: BitrixService | None = None) -> None:
    if not bitrix_service:
        await message.answer("–°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with ChatActionSender.typing(chat_id=message.chat.id, bot=message.bot):
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram user_id
        async with async_session_factory() as session:
            client_row = await session.execute(select(Client).where(Client.user_id == message.from_user.id))
            client: Client | None = client_row.scalars().one_or_none()
            if not client:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤—è–∑–æ–∫ –ø–æ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            links_row = await session.execute(
                select(BitrixTaskLink)
                .where(BitrixTaskLink.client_id == client.id, BitrixTaskLink.chat_id == message.chat.id)
                .order_by(desc(BitrixTaskLink.created_at)).limit(10)
            )
            links = list(links_row.scalars())
            if not links:
                await message.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å –ø–æ taskId
        lines = ["–í–∞—à–∏ –∑–∞–¥–∞—á–∏:"]
        any_found = False
        for link in links:
            brief = await bitrix_service.get_task_brief(link.task_id)
            if not brief:
                continue
            any_found = True
            title = brief.get('title') or ''
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            descr_text = (brief.get('description') or "").split("–ß–∞—Ç:")[0].strip()
            main_line = title.strip() or descr_text.splitlines()[0] if descr_text else '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'
            status_label = human_status(brief.get('status'))
            deadline = brief.get('deadline')
            dl_part = f" | –î–µ–¥–ª–∞–π–Ω: {deadline[:10]}" if deadline else ""
            lines.append(f"‚Ä¢ [{status_label}] {main_line}{dl_part} (ID: {brief.get('id')})")

        if not any_found:
            await message.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        await message.answer("\n".join(lines))


@router.message(Command("time"))
async def command_time_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–≤–µ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    current_time = now_msk()
    settings = BotSettings()
    is_working = is_processing_window_now(settings.processing_schedule)
    
    weekday_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    weekday = weekday_names[current_time.weekday()]
    
    working_status = "üü¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è" if is_working else "üî¥ –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"
    
    response = f"""üïê **–í—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ:**
{current_time.strftime('%d.%m.%Y %H:%M:%S')} ({weekday})

{working_status}
–†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {settings.processing_schedule['weekdays']} (–ø–Ω-–ø—Ç)"""
    
    await message.answer(response)
